// Generated by gencpp from file lvi_sam/cloud_info.msg
// DO NOT EDIT!


#ifndef LVI_SAM_MESSAGE_CLOUD_INFO_H
#define LVI_SAM_MESSAGE_CLOUD_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>
#include <sensor_msgs/PointCloud2.h>

namespace lvi_sam
{
template <class ContainerAllocator>
struct cloud_info_
{
  typedef cloud_info_<ContainerAllocator> Type;

  cloud_info_()
    : header()
    , startRingIndex()
    , endRingIndex()
    , pointColInd()
    , pointRange()
    , imuAvailable(0)
    , odomAvailable(0)
    , imuRollInit(0.0)
    , imuPitchInit(0.0)
    , imuYawInit(0.0)
    , odomX(0.0)
    , odomY(0.0)
    , odomZ(0.0)
    , odomRoll(0.0)
    , odomPitch(0.0)
    , odomYaw(0.0)
    , odomResetId(0)
    , cloud_deskewed()
    , cloud_corner()
    , cloud_surface()  {
    }
  cloud_info_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , startRingIndex(_alloc)
    , endRingIndex(_alloc)
    , pointColInd(_alloc)
    , pointRange(_alloc)
    , imuAvailable(0)
    , odomAvailable(0)
    , imuRollInit(0.0)
    , imuPitchInit(0.0)
    , imuYawInit(0.0)
    , odomX(0.0)
    , odomY(0.0)
    , odomZ(0.0)
    , odomRoll(0.0)
    , odomPitch(0.0)
    , odomYaw(0.0)
    , odomResetId(0)
    , cloud_deskewed(_alloc)
    , cloud_corner(_alloc)
    , cloud_surface(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _startRingIndex_type;
  _startRingIndex_type startRingIndex;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _endRingIndex_type;
  _endRingIndex_type endRingIndex;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _pointColInd_type;
  _pointColInd_type pointColInd;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _pointRange_type;
  _pointRange_type pointRange;

   typedef int64_t _imuAvailable_type;
  _imuAvailable_type imuAvailable;

   typedef int64_t _odomAvailable_type;
  _odomAvailable_type odomAvailable;

   typedef float _imuRollInit_type;
  _imuRollInit_type imuRollInit;

   typedef float _imuPitchInit_type;
  _imuPitchInit_type imuPitchInit;

   typedef float _imuYawInit_type;
  _imuYawInit_type imuYawInit;

   typedef float _odomX_type;
  _odomX_type odomX;

   typedef float _odomY_type;
  _odomY_type odomY;

   typedef float _odomZ_type;
  _odomZ_type odomZ;

   typedef float _odomRoll_type;
  _odomRoll_type odomRoll;

   typedef float _odomPitch_type;
  _odomPitch_type odomPitch;

   typedef float _odomYaw_type;
  _odomYaw_type odomYaw;

   typedef int64_t _odomResetId_type;
  _odomResetId_type odomResetId;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _cloud_deskewed_type;
  _cloud_deskewed_type cloud_deskewed;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _cloud_corner_type;
  _cloud_corner_type cloud_corner;

   typedef  ::sensor_msgs::PointCloud2_<ContainerAllocator>  _cloud_surface_type;
  _cloud_surface_type cloud_surface;





  typedef boost::shared_ptr< ::lvi_sam::cloud_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lvi_sam::cloud_info_<ContainerAllocator> const> ConstPtr;

}; // struct cloud_info_

typedef ::lvi_sam::cloud_info_<std::allocator<void> > cloud_info;

typedef boost::shared_ptr< ::lvi_sam::cloud_info > cloud_infoPtr;
typedef boost::shared_ptr< ::lvi_sam::cloud_info const> cloud_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lvi_sam::cloud_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lvi_sam::cloud_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lvi_sam::cloud_info_<ContainerAllocator1> & lhs, const ::lvi_sam::cloud_info_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.startRingIndex == rhs.startRingIndex &&
    lhs.endRingIndex == rhs.endRingIndex &&
    lhs.pointColInd == rhs.pointColInd &&
    lhs.pointRange == rhs.pointRange &&
    lhs.imuAvailable == rhs.imuAvailable &&
    lhs.odomAvailable == rhs.odomAvailable &&
    lhs.imuRollInit == rhs.imuRollInit &&
    lhs.imuPitchInit == rhs.imuPitchInit &&
    lhs.imuYawInit == rhs.imuYawInit &&
    lhs.odomX == rhs.odomX &&
    lhs.odomY == rhs.odomY &&
    lhs.odomZ == rhs.odomZ &&
    lhs.odomRoll == rhs.odomRoll &&
    lhs.odomPitch == rhs.odomPitch &&
    lhs.odomYaw == rhs.odomYaw &&
    lhs.odomResetId == rhs.odomResetId &&
    lhs.cloud_deskewed == rhs.cloud_deskewed &&
    lhs.cloud_corner == rhs.cloud_corner &&
    lhs.cloud_surface == rhs.cloud_surface;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lvi_sam::cloud_info_<ContainerAllocator1> & lhs, const ::lvi_sam::cloud_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lvi_sam

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lvi_sam::cloud_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lvi_sam::cloud_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lvi_sam::cloud_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lvi_sam::cloud_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lvi_sam::cloud_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lvi_sam::cloud_info_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lvi_sam::cloud_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b20d53b871fbcd5cfbe0760777a7af32";
  }

  static const char* value(const ::lvi_sam::cloud_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb20d53b871fbcd5cULL;
  static const uint64_t static_value2 = 0xfbe0760777a7af32ULL;
};

template<class ContainerAllocator>
struct DataType< ::lvi_sam::cloud_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lvi_sam/cloud_info";
  }

  static const char* value(const ::lvi_sam::cloud_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lvi_sam::cloud_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Cloud Info\n"
"Header header \n"
"\n"
"int32[] startRingIndex\n"
"int32[] endRingIndex\n"
"\n"
"int32[]  pointColInd # point column index in range image\n"
"float32[] pointRange # point range \n"
"\n"
"int64 imuAvailable\n"
"int64 odomAvailable\n"
"\n"
"# Attitude for lidar odometry initialization\n"
"float32 imuRollInit\n"
"float32 imuPitchInit\n"
"float32 imuYawInit\n"
"\n"
"# Odometry \n"
"float32 odomX\n"
"float32 odomY\n"
"float32 odomZ\n"
"float32 odomRoll\n"
"float32 odomPitch\n"
"float32 odomYaw\n"
"\n"
"# Odometry reset ID\n"
"int64 odomResetId\n"
"\n"
"# Point cloud messages\n"
"sensor_msgs/PointCloud2 cloud_deskewed  # original cloud deskewed\n"
"sensor_msgs/PointCloud2 cloud_corner    # extracted corner feature\n"
"sensor_msgs/PointCloud2 cloud_surface   # extracted surface feature\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointCloud2\n"
"# This message holds a collection of N-dimensional points, which may\n"
"# contain additional information such as normals, intensity, etc. The\n"
"# point data is stored as a binary blob, its layout described by the\n"
"# contents of the \"fields\" array.\n"
"\n"
"# The point cloud data may be organized 2d (image-like) or 1d\n"
"# (unordered). Point clouds organized as 2d images may be produced by\n"
"# camera depth sensors such as stereo or time-of-flight.\n"
"\n"
"# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n"
"# points).\n"
"Header header\n"
"\n"
"# 2D structure of the point cloud. If the cloud is unordered, height is\n"
"# 1 and width is the length of the point cloud.\n"
"uint32 height\n"
"uint32 width\n"
"\n"
"# Describes the channels and their layout in the binary data blob.\n"
"PointField[] fields\n"
"\n"
"bool    is_bigendian # Is this data bigendian?\n"
"uint32  point_step   # Length of a point in bytes\n"
"uint32  row_step     # Length of a row in bytes\n"
"uint8[] data         # Actual point data, size is (row_step*height)\n"
"\n"
"bool is_dense        # True if there are no invalid points\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/PointField\n"
"# This message holds the description of one point entry in the\n"
"# PointCloud2 message format.\n"
"uint8 INT8    = 1\n"
"uint8 UINT8   = 2\n"
"uint8 INT16   = 3\n"
"uint8 UINT16  = 4\n"
"uint8 INT32   = 5\n"
"uint8 UINT32  = 6\n"
"uint8 FLOAT32 = 7\n"
"uint8 FLOAT64 = 8\n"
"\n"
"string name      # Name of field\n"
"uint32 offset    # Offset from start of point struct\n"
"uint8  datatype  # Datatype enumeration, see above\n"
"uint32 count     # How many elements in the field\n"
;
  }

  static const char* value(const ::lvi_sam::cloud_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lvi_sam::cloud_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.startRingIndex);
      stream.next(m.endRingIndex);
      stream.next(m.pointColInd);
      stream.next(m.pointRange);
      stream.next(m.imuAvailable);
      stream.next(m.odomAvailable);
      stream.next(m.imuRollInit);
      stream.next(m.imuPitchInit);
      stream.next(m.imuYawInit);
      stream.next(m.odomX);
      stream.next(m.odomY);
      stream.next(m.odomZ);
      stream.next(m.odomRoll);
      stream.next(m.odomPitch);
      stream.next(m.odomYaw);
      stream.next(m.odomResetId);
      stream.next(m.cloud_deskewed);
      stream.next(m.cloud_corner);
      stream.next(m.cloud_surface);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cloud_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lvi_sam::cloud_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lvi_sam::cloud_info_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "startRingIndex[]" << std::endl;
    for (size_t i = 0; i < v.startRingIndex.size(); ++i)
    {
      s << indent << "  startRingIndex[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.startRingIndex[i]);
    }
    s << indent << "endRingIndex[]" << std::endl;
    for (size_t i = 0; i < v.endRingIndex.size(); ++i)
    {
      s << indent << "  endRingIndex[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.endRingIndex[i]);
    }
    s << indent << "pointColInd[]" << std::endl;
    for (size_t i = 0; i < v.pointColInd.size(); ++i)
    {
      s << indent << "  pointColInd[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.pointColInd[i]);
    }
    s << indent << "pointRange[]" << std::endl;
    for (size_t i = 0; i < v.pointRange.size(); ++i)
    {
      s << indent << "  pointRange[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.pointRange[i]);
    }
    s << indent << "imuAvailable: ";
    Printer<int64_t>::stream(s, indent + "  ", v.imuAvailable);
    s << indent << "odomAvailable: ";
    Printer<int64_t>::stream(s, indent + "  ", v.odomAvailable);
    s << indent << "imuRollInit: ";
    Printer<float>::stream(s, indent + "  ", v.imuRollInit);
    s << indent << "imuPitchInit: ";
    Printer<float>::stream(s, indent + "  ", v.imuPitchInit);
    s << indent << "imuYawInit: ";
    Printer<float>::stream(s, indent + "  ", v.imuYawInit);
    s << indent << "odomX: ";
    Printer<float>::stream(s, indent + "  ", v.odomX);
    s << indent << "odomY: ";
    Printer<float>::stream(s, indent + "  ", v.odomY);
    s << indent << "odomZ: ";
    Printer<float>::stream(s, indent + "  ", v.odomZ);
    s << indent << "odomRoll: ";
    Printer<float>::stream(s, indent + "  ", v.odomRoll);
    s << indent << "odomPitch: ";
    Printer<float>::stream(s, indent + "  ", v.odomPitch);
    s << indent << "odomYaw: ";
    Printer<float>::stream(s, indent + "  ", v.odomYaw);
    s << indent << "odomResetId: ";
    Printer<int64_t>::stream(s, indent + "  ", v.odomResetId);
    s << indent << "cloud_deskewed: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.cloud_deskewed);
    s << indent << "cloud_corner: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.cloud_corner);
    s << indent << "cloud_surface: ";
    s << std::endl;
    Printer< ::sensor_msgs::PointCloud2_<ContainerAllocator> >::stream(s, indent + "  ", v.cloud_surface);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LVI_SAM_MESSAGE_CLOUD_INFO_H
